package org.fluentcodes.projects.elasticobjects.models;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

//<call templateKey="AllImport.tpl" keep="JAVA" }
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;


//</call>
//<call templateKey="AllHeader.tpl" keep="JAVA" }
/**
 * Test Description.
 * Created by Albert Zweistein on 09.10.2016.
 */

//</call>
//<call templateKey="AllClass.tpl" keep="JAVA" }
public class BuilderTest
//</call>
    {
    private static transient Logger LOG = LogManager.getLogger(BuilderTest.class);
    public enum KEYS {
//<call keep="JAVA" templateKey="AllKeys.tpl" }\n    id,untypedList,untypedMap,testInt,testString,testLong,testDate,testBoolean,testFloat,testDouble,testObject

//</call>
    }
//<call keep="JAVA" templateKey="CacheInstanceVars.tpl" }
    private final Long id;
    private final ArrayList untypedList;
    private final HashMap untypedMap;
    private final Integer testInt;
    private final String testString;
    private final Long testLong;
    private final Date testDate;
    private final Boolean testBoolean;
    private final Float testFloat;
    private final Double testDouble;
    private final Object testObject;

//</call>
    public BuilderTest(final EOConfigsCache configsCache, Builder builder)  {
      super(configsCache, builder);
//<call keep="JAVA" templateKey="CacheSetter.tpl" }
    this.id = builder.id;
    this.untypedList = builder.untypedList;
    this.untypedMap = builder.untypedMap;
    this.testInt = builder.testInt;
    this.testString = builder.testString;
    this.testLong = builder.testLong;
    this.testDate = builder.testDate;
    this.testBoolean = builder.testBoolean;
    this.testFloat = builder.testFloat;
    this.testDouble = builder.testDouble;
    this.testObject = builder.testObject;
//</call>
    }

   <call templateKey="CacheGetter.tpl" keep="JAVA" }
 
    /**
    * The id with a autonumbering
    */

     private Long getId () {
         return this.id;
     }
 
 
     private ArrayList getUntypedList () {
         return this.untypedList;
     }
 
 
     private HashMap getUntypedMap () {
         return this.untypedMap;
     }
 
 
     private Integer getTestInt () {
         return this.testInt;
     }
 
 
    /**
    * Just a small test string used in test models. 
    */

     private String getTestString () {
         return this.testString;
     }
 
 
     private Long getTestLong () {
         return this.testLong;
     }
 
 
     private Date getTestDate () {
         return this.testDate;
     }
 
 
     private Boolean getTestBoolean () {
         return this.testBoolean;
     }
 
 
     private Float getTestFloat () {
         return this.testFloat;
     }
 
 
     private Double getTestDouble () {
         return this.testDouble;
     }
 
 
    /**
    * A test object thing. 
    */

     private Object getTestObject () {
         return this.testObject;
     }
 
//</call>

   public static class Builder extends $[superKey].Builder {
//<call keep="JAVA" templateKey="BeanInstanceVars.tpl" }    private Long id;
    private ArrayList untypedList;
    private HashMap untypedMap;
    private Integer testInt;
    private String testString;
    private Long testLong;
    private Date testDate;
    private Boolean testBoolean;
    private Float testFloat;
    private Double testDouble;
    private Object testObject;


//</call>
     protected void prepare(Map<String, Object> values)  {
//<call keep="JAVA" templateKey="ConfigBuilderSetter.tpl" }
    this.id = EOConverter.transform(configsCache,
         "Long",
         attributes.get(KEYS.id.name(),
         "");
    this.untypedList = EOConverter.transform(configsCache,
         "ArrayList",
         attributes.get(KEYS.untypedList.name(),
         "");
    this.untypedMap = EOConverter.transform(configsCache,
         "HashMap",
         attributes.get(KEYS.untypedMap.name(),
         "");
    this.testInt = EOConverter.transform(configsCache,
         "Integer",
         attributes.get(KEYS.testInt.name(),
         "");
    this.testString = EOConverter.transform(configsCache,
         "String",
         attributes.get(KEYS.testString.name(),
         "");
    this.testLong = EOConverter.transform(configsCache,
         "Long",
         attributes.get(KEYS.testLong.name(),
         "");
    this.testDate = EOConverter.transform(configsCache,
         "Date",
         attributes.get(KEYS.testDate.name(),
         "");
    this.testBoolean = EOConverter.transform(configsCache,
         "Boolean",
         attributes.get(KEYS.testBoolean.name(),
         "");
    this.testFloat = EOConverter.transform(configsCache,
         "Float",
         attributes.get(KEYS.testFloat.name(),
         "");
    this.testDouble = EOConverter.transform(configsCache,
         "Double",
         attributes.get(KEYS.testDouble.name(),
         "");
    this.testObject = EOConverter.transform(configsCache,
         "Object",
         attributes.get(KEYS.testObject.name(),
         "");
//</call>
       super.prepare(values);
     }

     @Override
     public Config build(EOConfigsCache configsCache, Map<String, Object> values)  {
       prepare(values);
       return new BuilderTest(configsCache, this);
     }
   }
}
