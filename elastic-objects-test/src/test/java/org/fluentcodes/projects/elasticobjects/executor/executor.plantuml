@startuml

title __EXECUTOR's Class Diagram__\n

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      class CallExecutorModelConfigTest {
          {static} - LOG : Logger
          + createFromModelDoesNotWork()
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      class EOWithFileCallTest {
          {static} - METHOD_SOURCE_TXT : String
          + addFileReadAction()
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      class EOWithValueCallTest {
          + testItem()
          + testItemAddedToChild()
          + add2ActionsToAdapter()
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      class ExecutorItemTest {
          {static} - METHOD_VALUE_CALL_SET : String
          {static} - METHOD_VALUES_MISC_SET : String
          + valuesMisc()
          + checkAction()
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      class ExecutorListTemplateModelsTest {
          {static} - LOG : Logger
          + callModelWithLoopPathAll()
          + callModelWithPathAndLoopPathAll()
          + callModelWithLoopPathAndEmbeddedIf()
          + modelWithLoopPathAndEmbeddedIfKeep()
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      class ExecutorListTemplateSimpleTest {
          {static} - LOG : Logger
          + emptyNoCallTpl()
          + emptyWithCallAtStartStopTpl()
          + emptyWithCallTpl()
          + emptyWithEmbeddedCallTpl()
          + attributeWithCallTpl()
          + attributeWithEmbeddedCallTpl()
          + attributeGlobalTpl()
          + attributeGlobalParallelTpl()
          + valuesWithCallAndPathTpl()
          + valuesNoCallNotExistingValue()
          + valuesNoCall()
          + valuesWithCallDeeperPath()
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      class ExecutorListTest {
          {static} + createSampleExecutorList()
          + callToString()
          + toJSON()
          + EOtoJSON()
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      class ExecutorWithFileCallReadTest {
          + withMapPath()
          + withLongPathAndMapPath()
          + withPathAndMapPath()
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      class ExecutorWithFileCallWriteTest {
          + execute()
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      class ExecutorWithValueCallTest {
          {static} - LOG : Logger
          {static} - METHOD_SET_EMPTY : String
          + intValue1_With_Path()
          + intValue1WithPathMapPathAndValue()
          + keyNotExists_createLogEntry()
          + intValue1WithMapPathAndValue()
          + testItemWithPathPathAndValue_ignoresValue()
          + testItemWithPathPath()
          + emptyWithBT()
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      class ValuesMiscTest {
          + join()
      }
    }
  }
  

  CallExecutorModelConfigTest -up-|> TestHelper
  EOWithFileCallTest -up-|> TestHelper
  EOWithValueCallTest -up-|> TestHelper
  ExecutorListTemplateModelsTest -up-|> TestHelper
  ExecutorListTemplateSimpleTest -up-|> TestHelper
  ExecutorWithFileCallReadTest -up-|> TestHelper
  ExecutorWithFileCallWriteTest -up-|> TestHelper
  ExecutorWithValueCallTest -up-|> TestHelper


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
