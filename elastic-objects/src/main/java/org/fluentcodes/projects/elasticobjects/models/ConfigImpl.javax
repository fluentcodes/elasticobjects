package org.fluentcodes.projects.elasticobjects.models;
/*==>{TemplateResourceCall->ALLImport.tpl, javaGenImport/*, JAVA}|*/
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.fluentcodes.projects.elasticobjects.domain.BaseImpl;
/*=>{}.*/

/**
 *Basic cache as super object for other cached items. 
 * Created byWerner Diwischek on 29.9.2020.
 */
public classConfigImplextends BaseImpl implements Config, {

/*==>{TemplateResourceCall->ALLStaticNames.tpl, fieldMap/*, JAVA, override eq false}|*/
/*=>{}.*/

/*==>{TemplateResourceCall->ALLInstanceVars.tpl, fieldMap/*, JAVA}|*/
   private  Expose expose;
   private final  String module;
   private final  String moduleScope;
   private final  Map properties;
   private final  List<Scope> scope;
/*=>{}.*/

publicConfigImpl() {final Map inputMap) {
/*==>{TemplateResourceCall->CONFIGConstructor.tpl, fieldMap/*, JAVA}|*/   this.expose = (Expose) inputMap.get(EXPOSE);

   this.module = (String) inputMap.get(MODULE);

   this.moduleScope = (String) inputMap.get(MODULE_SCOPE);

   this.properties = (Map) inputMap.get(PROPERTIES);

   this.scope = (List<Scope>) inputMap.get(SCOPE);


/*=>{}.*/
}

/*==>{TemplateResourceCall->ALLSetter.tpl, fieldMap/*, JAVA}|*/

    /**
    expose
    */
    @Override
    public ConfigImpl setExpose(Expose expose) {
        this.expose = expose;
        return this;
    }

    @Override
    public Expose getExpose () {
       return this.expose;
    }

    @Override
    public boolean hasExpose () {
        return expose!= null;
    }

    /**
    Defines a target module where generating occurs. 
    */

    @Override
    public String getModule () {
       return this.module;
    }

    @Override
    public boolean hasModule () {
        return module!= null && !module.isEmpty();
    }

    /**
    Defines scope of the configuration within module, eg 'test' or 'main' .
    */

    @Override
    public String getModuleScope () {
       return this.moduleScope;
    }

    @Override
    public boolean hasModuleScope () {
        return moduleScope!= null && !moduleScope.isEmpty();
    }

    /**
    Properties for configurations.
    */

    @Override
    public Map getProperties () {
       return this.properties;
    }

    @Override
    public boolean hasProperties () {
        return properties!= null && !properties.isEmpty();
    }

    /**
    A scope for the cache value.
    */

    @Override
    public List<Scope> getScope () {
       return this.scope;
    }

    @Override
    public boolean hasScope () {
        return scope!= null && !scope.isEmpty();
    }
/*=>{}.*/
}

