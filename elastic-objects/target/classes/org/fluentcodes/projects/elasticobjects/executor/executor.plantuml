@startuml

title __EXECUTOR's Class Diagram__\n

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      class CallExecutor {
          {static} + ACTION : String
          {static} - ignoreSerializeKeys : Set<String>
          {static} - LOG : Logger
          + CallExecutor()
          {static} - createIgnoreSerializeKeys()
          {static} # hasAction()
          + mapAttributes()
          + getAction()
          + getCacheKey()
          + execute()
          + execute()
          + toString()
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      interface Executor {
          {abstract} + execute()
          {abstract} + execute()
          {abstract} + getAttribute()
          {abstract} + getAttributes()
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      abstract class ExecutorImpl {
          - attributes : Map
          + ExecutorImpl()
          {static} + getPathList()
          # mapAttributes()
          + getAttributes()
          + getAttribute()
          # hasExecute()
          # getExecutorItem()
          # setExecutorItem()
          # hasLoopPath()
          + getLoopPath()
          + setLoopPath()
          # hasPath()
          + getPath()
          + setPath()
          # hasMapPath()
          # getMapPath()
          # setMapPath()
          # getPathList()
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      class ExecutorItem {
          - method : Method
          - methodName : String
          - executorClass : Class
          - className : String
          - args : String[]
          + ExecutorItem()
          # getMethod()
          # getMethodName()
          # getExecutorClass()
          # getClassName()
          # getArgsLength()
          # getArgs()
          # getArgs()
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      enum TYPES {
        value
        call
        classPath
        argClass
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      class ExecutorList {
          {static} - LOG : Logger
          - executorList : List<Executor>
          + ExecutorList()
          + ExecutorList()
          + add()
          + add()
          + addContentTemplateAction()
          + isEmpty()
          + size()
          + getExecutorList()
          + getListMap()
          + execute()
          + execute()
          + toString()
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      class ExecutorListTemplate {
          {static} + EXECUTE : String
          {static} - LOG : Logger
          {static} - actionPattern : Pattern
          {static} - attributePattern : Pattern
          - parentAttributes : Map
          + ExecutorListTemplate()
          + ExecutorListTemplate()
          - createTemplateList()
          - getAttributes()
          - findEndTag()
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      class ExecutorValues {
          {static} - LOG : Logger
          - values : List
          - mapPath : String
          + ExecutorValues()
          # mapAttributes()
          - initValues()
          # hasMapPath()
          + getMapPath()
          + setMapPath()
          + execute()
          + execute()
      }
    }
  }
  

  package org.fluentcodes.projects.elasticobjects {
    package org.fluentcodes.projects.elasticobjects.executor {
      class ValueParamsHelper {
          + ValueParamsHelper()
          {static} # checkValues()
          {static} # checkValues()
          {static} # checkValuesMinimal()
          {static} # checkValuesAdapter()
          {static} # checkValuesString()
          {static} # getString()
          {static} # getStringWithDefault()
          {static} # getInt()
          {static} # getDouble()
          {static} # getBoolean()
          {static} # getAdapter()
      }
    }
  }
  

  CallExecutor -up-|> Executor
  CallExecutor -up-|> ExecutorImpl
  ExecutorImpl o-- ExecutorItem : executorItem
  ExecutorImpl o-- TYPES : type
  ExecutorItem +-down- TYPES
  ExecutorListTemplate -up-|> ExecutorList
  ExecutorValues -up-|> Executor
  ExecutorValues -up-|> ExecutorImpl


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
